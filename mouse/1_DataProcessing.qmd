# 1. Data Pre-processing

This notebook contains the bash scripts used to download the fastq, quality control with fastQC and multiQC and alignment of the sequences.

## 1.1. Download fastQ files from ENA

https://www.ebi.ac.uk/biostudies/arrayexpress/studies/E-MTAB-8662

```{bash}
#!/bin/bash
# [matterhorn]
# AUTHOR: Alba Mendez Alejandre
# DESCRIPTION: Download the raw fastQ via ftp from ENA. The metadata is stored in the downloaded csv. 
# DATE: 10/06/2024

seq_ids=("run1" "run2")

for seq_number in "${seq_ids[@]}"; do

    # Path to our CSV file
    CSV_FILE="/mnt/D/mcGinn_2021/data_info/${seq_number}_download.csv"

    # Directory where we are going to download the data (bam and fastq)
    DOWNLOAD_DIR="./${seq_number}_run1/${seq_number}_adult_P70"

    # Create the directory if it doesn't exist
    mkdir -p "$DOWNLOAD_DIR"

    # Iterate through each line in the CSV file
    { 
        read # skip header
        while IFS=, read -r name source_name bam_uri R1_fastq_uri R2_fastq_uri I1_fastq_uri # these are the columns of the file
        do
            # Skip header
            if [[ $name == "name" ]]; then
            continue
            fi

            # Ensure the URI is not empty
            if [[ -z $R1_fastq_uri ]]; then
            echo "Empty URI for name: $name"
            continue
            fi

            # Download R1_fastq_uri
            curl -L -o "${DOWNLOAD_DIR}/${name}_$(basename "$R1_fastq_uri")" "$R1_fastq_uri"
            
            if [[ -z $R2_fastq_uri ]]; then
            echo "Empty URI for name: $name"
            continue
            fi

            # Download R2_fastq_uri
            curl -L -o "${DOWNLOAD_DIR}/${name}_$(basename "$R2_fastq_uri")" "$R2_fastq_uri"
            
            if [[ -z $I1_fastq_uri ]]; then
            echo "Empty URI for name: $name"
            continue
            fi

            # Download I1_fastq_uri
            curl -L -o "${DOWNLOAD_DIR}/${name}_$(basename "$I1_fastq_uri")" "$I1_fastq_uri"
        
            if [[ -z $bam_uri ]]; then
            echo "Empty URI for name: $name"
            continue
            fi

        done < "$CSV_FILE"
    }
done

```

```{bash}
./
```

After the download of fastQ files, they were concatenated in order to obtain 

## 1.2 Quality control with MultiQC

```{bash}




```


## 1.3. STAR aligment

Separate scripts were used for each sequencing session (names as run1 and run2 for simplification).
```{bash}
#!/bin/bash
# [folia]
# This script must be executed in the server where we want to run STAR

# activate env where we have installed STAR
source /home/albax/miniforge3/bin/activate STAR

FOLIA_BASE="/home/albax/mcGinn_2021"
MATTERHORN_BASE="/media/storage/mcGinn_2021"
CONCATENATED_RUNS_DIR="${MATTERHORN_BASE}/concatenated_runs/sample_concatenated"


SAMPLE_NAMES=("lib1" "lib2" "lib3" "lib4" "lib5" "lib6" "lib7" "lib8") # list of samples to proccess

i=0
for SAMPLE in "${SAMPLE_NAMES[@]}"; 
do
	i=$((i + 1))

	SAMPLE_DIR="${CONCATENATED_RUNS_DIR}/${SAMPLE}"
	LOCAL_SAMPLE_DIR="${FOLIA_BASE}${SAMPLE_DIR}"
	echo "Processing sample: ${SAMPLE}"

	R2_FILE="${SAMPLE_DIR}/${SAMPLE}*R2*run1.fastq.gz"
	R1_FILE="${SAMPLE_DIR}/${SAMPLE}*R1*run1.fastq.gz"

	# Files' pull from matterhorn to folia
	rsync -avR --progress -hh "alba@matterhorn:${R2_FILE}" "${FOLIA_BASE}"
	rsync -avR --progress -hh "alba@matterhorn:${R1_FILE}" "${FOLIA_BASE}"

	LOCAL_R2_FILE="${FOLIA_BASE}${R2_FILE}"
	LOCAL_R1_FILE="${FOLIA_BASE}${R1_FILE}"

	echo "R2 file (folia): ${LOCAL_R2_FILE}"
    echo "R1 file (folia): ${LOCAL_R1_FILE}"
	
	cd ${FOLIA_BASE}
	mkdir -p "${FOLIA_BASE}/STAR_out/${SAMPLE}"

  # Process files
#	~/miniforge3/envs/STAR/bin/STAR \
	STAR --runMode alignReads --genomeDir /home/albax/reference_genomes/STAR_indexes/Mus_musculus/mm10 --outFileNamePrefix STAR_out/SLX-17937_${SAMPLE} --readFilesCommand zcat --readFilesIn ${LOCAL_R2_FILE} ${LOCAL_R1_FILE} --soloType CB_UMI_Simple --soloCBwhitelist /home/albax/mcGinn_2021/STAR_whitelist/3M-february-2018.txt --soloCBstart 1 --soloCBlen 16 --soloUMIstart 17 --soloUMIlen 12 --soloStrand Forward --soloFeatures Gene GeneFull Velocyto --outSAMattributes NH HI AS nM CR UR CB UB GX GN sM sS sQ --outSAMtype BAM SortedByCoordinate --runThreadN 4

	if [[ $? -ne 0 ]]; then
		echo "STAR alignment failed for sample ${SAMPLE}."
		continue
	fi

        # Transfer back to matterhorn
	ssh alba@matterhorn "mkdir -p /media/storage/mcGinn_2021/STARalignment/${SAMPLE}/"

	rsync -av --progress -hh ${FOLIA_BASE}/STAR_out/*${SAMPLE}* alba@matterhorn:${MATTERHORN_BASE}/STARalignment/${SAMPLE}/

	# Remove to save space
	echo -e "\n[ $(date +'%Y/%m/%d %T.%3N') ] Finished processing ${SAMPLE}"
	rm ${LOCAL_R1_FILE} ${LOCAL_R2_FILE}
	rm -r ${FOLIA_BASE}/STAR_out/*${SAMPLE}*/

done

# clean up base directory
rm -r ${FOLIA_BASE}/STAR_out

conda deactivate

```


Generate the reference genome indexed file

```{bash}
#!/bin/bash

cd ~/reference_genomes/
mkdir STAR_indexes
mkdir logs

# path to star
~/miniforge3/envs/STAR/bin/STAR \
	        --runThreadN 4 \
		--runMode genomeGenerate \
		--genomeDir ./STAR_indexes/Mus_musculus/mm10 \
		--genomeFastaFiles ./Mus_musculus_C57BL-6J/Mus_musculus.GRCm38.dna.primary_assembly.fa \
		--sjdbGTFfile ./Mus_musculus_C57BL-6J/Mus_musculus.GRCm38.97.gtf \
						        |& tee logs/star_index.log
```


## 1.4. Create Seurat object

The next step is to create the seurat object with the count matrices obtained from STARsolo, with spliced, unspliced and gene matrices.

:::{.callout-note}
## [The file is named "1-4_merge_seurat_fixedrank.R"]
:::