# 2. Gene Expression in esophagus HCA dataset"


## Import libraries
```{r}
#| fold: true
.libPaths("/home/albax/miniforge3/envs/seurat_v4/lib/R/library")

if(.Platform$OS.type == "linux") Sys.setenv(PATH= paste("/home/albax/miniforge3/envs/seurat_v4/lib",Sys.getenv()["PATH"],sep=";"))

library(reticulate)

use_condaenv("/home/albax/miniforge3/envs/seurat_v4", required = TRUE)
py_config()

import("kaleido")
import("orca")
# import("numpy")
# import("leidenalg")
# import("pandas")

library(Seurat) 
library(dplyr) 
library(ggplot2) 
library(plotly) 
library(SingleCellExperiment) 
# library(httpgd) 
library(patchwork)
library(dplyr)
library(tidyverse)
library(tibble)

color.list <- RColorBrewer::brewer.pal(12,"Paired")
color.list <- c(color.list,RColorBrewer::brewer.pal(12,"Set3"))

# Palette from orange to violet
palette <- scale_color_viridis_c(option = "plasma", direction = -1) # continue colors palette
palette_d <- scale_color_viridis_d(option = "turbo", direction = -1) # discrete colors palette

projectPath <- setwd("/home/albax/human_esophagus") # where we are

```


## Import RDS
```{r}
my_esoph <- readRDS(file = "./data/hca_myesoph.rds")
my_esoph
oesopha <- readRDS(file = "/home/dario/TFM/2019.12.31_Meyer/singlecell/paper_analysis/oesophagus_ts.rds")
oesopha <- UpdateSeuratObject(oesopha)
oesopha

hca_esoph <- readRDS(file = "./data/hca_esoph_with_annotations.rds")
hca_esoph <- UpdateSeuratObject(hca_esoph)
hca_esoph
# An object of class Seurat 
# 24245 features across 87947 samples within 1 assay 
# Active assay: RNA (24245 features, 0 variable features)
#  3 layers present: counts, data, scale.data
#  2 dimensional reductions calculated: pca, umap
DefaultAssay(hca_esoph) <- "RNA"
```

Functions for plots: 
```{r}
generate_plotly_boxplot <- function(data_table, col_to_plot) {
    fig <- data_table %>%
        plot_ly(
            x = ~Group,
            y = ~data_table[[col_to_plot]],
            split = ~Group,
            type = 'box',
            boxmean = TRUE,
            showlegend = FALSE,
            text = ~Gene, 
            hoverinfo = 'text+x'
        )
    fig <- fig %>% layout(yaxis = list(rangemode="tozero", title = col_to_plot), xaxis = list(tickangle = 45), title = "Gene expression")

    return(fig)
}

generate_plotly_boxplot_ggplot2 <- function(data_table, col_to_plot) {
  # Create the boxplot using ggplot2
  p <- ggplot(data_table, aes(x = Group, y = data_table[[col_to_plot]], fill = Group)) +
    geom_boxplot() +
    stat_summary(fun = "mean", geom = "line", size = 2, color = "red") + # Adding boxplot mean
    theme_minimal() +
    coord_cartesian(ylim = c(0, 2)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
    labs(title = "Gene expression", x = "Group", y = "Expression ($RNA@data)")

  # fig <- ggplotly(p)

  return(p)
}

```


# Grouped gene expression
We are going to calculate the average expression os specific sets of genes. For that, we are going to do:

- All *mutated* genes + all genes 
- common cancer *mutated* genes + common cancer genes
- intOGen *mutated* genes + intogen genes

1. Calculate the average expression per mutated gene -> Avg_expression_per_gene_all_mut_genes
2. Calculate the average expression per driver gene (motated or not) from common cancer -> Avg_expression_common_cancer_genes
3. Calculate the average expression per mutated gene from intOGen database -> Avg_expression_intogen_mut_genes

::: {.callout-note}
# Remember:
- @assays$RNA@counts -> contains raw counts
- @assays$RNA@data -> contains log1p counts = log(1 + x). This transformation is done in datasets with a lot of small values, near 0 (skewed data).
- @assays$RNA@scale.data -> contains Z-scored (mean=0, sd=1) expression values, typically after regressing out unwanted. For visualization in PCA or UMAP. 
:::

```{r}
mutated_genes <- read.table("/home/albax/dario_TFM/singlecell/gene_expression/mutated_genes_hca.txt", sep = "\t", header = TRUE)

colnames(mutated_genes)
```



## 2.1. Average gene expression
The idea is to have three vectors, so that we construct a table: 
    | mutated_genes_scomatic | cancer_panel_genes | mutated_cancer_panel_genes  |
genA |  0.32167 |
genB | 1.219486 |
genC | 0.124125 |
genD | 1.12442 |
...  | ...


Each value is the average expressino of that gene across all the cells where they express, that means, across all the cells that contain a expression of !=0 for that gene. This way, we obtain a single vector, which is the average.

Example: the p53 is calculates for all the cells where p53 is expressed (!=0). 


```{python}
#| fold: true
import itertools
import numpy as np
import pandas as pd
import gzip
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.colors
import plotly.express as px
import plotly.figure_factory as ff
import seaborn as sns
import scipy
import ast

from scipy.io import mmread
from scipy.sparse import csr_matrix

```

### i. Save normalized counts matrix 
See @sec-save-norm-counts to view the code used.

### ii. Read only Epi cells matrix
```{python}
# Only Epi cells normalized count matrix
count_matrix_norm = mmread('/home/albax/human_esophagus/matrix_counts/hca_corrected_counts_matrix_Epi.mtx') # only Epi counts

count_matrix_norm_csr = csr_matrix(count_matrix_norm)
count_matrix_norm_csr.min() # Max is 8.275 only in Epi
count_matrix_norm_csr.max()
count_matrix_norm_csr

# <Compressed Sparse Row sparse matrix of dtype 'float64' -> whole mtx
	# with 126113746 stored elements and shape (23835, 68173)

# <Compressed Sparse Row sparse matrix of dtype 'float64' -> only epi matrix
# 	with 118729710 stored elements and shape (23835, 61241)> (genes, cells) (rows,columns)
count_matrix_norm_csr.shape[0] # rows = genes
count_matrix_norm_csr.shape[1] # cols = cells

# load cell names of the total matrix
all_cell_names = pd.read_csv('/home/albax/human_esophagus/matrix_counts/cell_names.txt', header=None)[0].values  #68173

# load cell names of the total matrix
all_gene_names = pd.read_csv('/home/albax/human_esophagus/matrix_counts/gene_names.txt', header=None)[0].values # 23835

```


### iii. Average of each subset of genes
average of each gene from "mutated_genes$all_mutated_genes" across all cells (cols) that are !=0 for that gene

```{python}
def compute_avg_nonzero_expression(gene_list, gene_to_index, count_matrix, all_gene_names, column_name):
    # Filter gene list to only those present in the matrix
    valid_genes = [gene for gene in gene_list if gene in gene_to_index]

    avg_expression = {}
    for gene in valid_genes:
        idx = gene_to_index[gene]
        gene_row = count_matrix[idx, :]
        non_zero_values = gene_row.data # only non-zero values stored in sparse matrix
        # print(len(non_zero_values))

        if len(non_zero_values) > 0:
          avg_expression[gene] = np.mean(non_zero_values)
        else:
          avg_expression[gene] = 0

    # Convert to DataFrame
    df = pd.DataFrame.from_dict(avg_expression, orient="index", columns=[column_name])
    df.index.name = "gene"
    return df.reset_index()
```


```{python}
gene_to_index = {gene: idx for idx, gene in enumerate(all_gene_names)}

# Average expression of all somatic mutated genes
mutated_gene_list = mutated_genes["all_mutated_genes"].dropna().unique()
avg_expr_df_somatic = compute_avg_nonzero_expression(mutated_gene_list, gene_to_index,    count_matrix_norm_csr, all_gene_names, column_name="avg_expr_per_gene_somatic_mut")

# Average expression of common cancer genes
common_cancer_list = ("ADAM29", "ADAMTS18", "AJUBA", "AKT1", "AKT2", "APOB", "ARID1A", "ARID2", "AURKA", "BAI3", "BRAF", "CASP8", "CCND1", "CDH1", "CDKN2A", "CR2", "CREBBP", "CUL3", "DICER1", "EGFR", "EPHA2", "ERBB2", "ERBB3", "ERBB4", "EZH2", "FAT1", "FAT4", "FBXW7", "FGFR1", "FGFR2", "FGFR3", "FLG2", "GRIN2A", "GRM3", "HRAS", "IRF6", "KCNH5", "KEAP1", "KMT2A", "KMT2C", "KMT2D", "KRAS", "MET", "MUC17", "NF1", "NFE2L2", "NOTCH1", "NOTCH2", "NOTCH3", "NOTCH4", "NRAS", "NSD1", "PCED1B", "PIK3CA", "PLCB1", "PPP1R3A", "PREX2", "PTCH1", "PTEN", "PTPRT", "RB1", "RBM10", "SALL1", "SCN11A", "SCN1A", "SETD2", "SMAD4", "SMO", "SOX2", "SPHKAP", "SUFU", "TP53", "TP63", "TRIOBP", "ZNF750", "TGFBR2")
avg_expr_df_common_cancer = compute_avg_nonzero_expression(common_cancer_list, gene_to_index, count_matrix_norm_csr, all_gene_names, column_name="avg_expr_per_gene_common_cancer")
merged_df = pd.merge(avg_expr_df_somatic, avg_expr_df_common_cancer, on="gene", how="outer") # keep all genes and fill with NaN

# Average expression of common cancer mutated genes
common_cancer_mut_list = mutated_genes["common_cancer_mutated_genes"].dropna().unique()
avg_expr_df_common_cancer_mut = compute_avg_nonzero_expression(common_cancer_mut_list, gene_to_index, count_matrix_norm_csr, all_gene_names, column_name="avg_expr_per_gene_common_cancer_mut")
merged_df = pd.merge(merged_df, avg_expr_df_common_cancer_mut, on="gene", how="outer")

```

### iv. ViolinPlot for expression of each subset

```{python}
melted_df = merged_df.melt(id_vars=["gene"], value_vars=("avg_expr_per_gene_common_cancer","avg_expr_per_gene_somatic_mut",  "avg_expr_per_gene_common_cancer_mut"), var_name="gene_group", value_name="Expression")

plt.figure(figsize=(4, 8))
sns.violinplot(data=melted_df, x="gene_group", y="Expression", orient="v", log_scale=False, cut=0)
plt.xlabel("Gene group")
plt.xticks(rotation=90)
plt.ylabel("Gene expression (normalized)")
plt.title("Violin plot of expression levels by gene group")
plt.grid(True, which='both', linestyle='--', linewidth=0.2)
plt.tight_layout()
plt.savefig('/home/albax/human_esophagus/gene_expression/plots/avg_expr_per_gene.png', dpi=500)
plt.show()

```


## 2.2. Statistical tests
We expect the distribution of "mutated cancer genes / cancer genes" to be less than "scomatic mutated genes", as we expect that it is more difficult to capture driver genes becasue of lack of capture (which we can prove by low gene expression and low depth). 

```{python}
from scipy.stats import mannwhitneyu

mut_scomatic = avg_expr_df_somatic["avg_expr_per_gene_somatic_mut"].tolist()
cancer_expr = avg_expr_df_common_cancer["avg_expr_per_gene_common_cancer"].tolist()

# less: distribution underlying x is stochastically less than the distribution underlying y [mannwhitneyu(x,y)]
mannwhitneyu(cancer_expr, mut_scomatic, alternative = "less") # MannwhitneyuResult(statistic=np.float64(42726.0), pvalue=np.float64(0.0008325722309072082))

cancer_mut_expr = avg_expr_df_common_cancer_mut["avg_expr_per_gene_common_cancer_mut"].tolist()
mannwhitneyu(cancer_mut_expr, mut_scomatic, alternative = "less") # MannwhitneyuResult(statistic=np.float64(9744.5), pvalue=np.float64(0.7028241416624055))

```
